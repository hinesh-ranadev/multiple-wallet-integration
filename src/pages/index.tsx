import Head from "next/head";
import { Inter } from "next/font/google";
import {
  useAccountCenter,
  useConnectWallet,
  useWallets,
} from "@web3-onboard/react";
import { useEffect, useState, useMemo } from "react";
import { WalletsType, defaultWallets } from "@/constants/Wallets";
import WalletCard from "@/components/Home/WalletCard";
import type { WalletState } from "@web3-onboard/core/dist/types";
import { getShortWalletAddress } from "@/utils";
import ConnectWalletModal from "@/components/common/ConnectWalletModal";

const inter = Inter({ subsets: ["latin"] });

const Home = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [wallets, setWallets] = useState<WalletsType[]>(defaultWallets);

  const updateAccountCenter = useAccountCenter();

  // list of all connected wallets
  const connectedWallets = useWallets();

  // web3Onboard: current selected wallet and all awailable methods
  const [
    { wallet: currentWallet, connecting },
    connect,
    disconnect,
    updateBalances,
    setWalletModules,
    setPrimaryWallet,
  ] = useConnectWallet();

  const sortedConnectedWallets = useMemo(() => {
    return connectedWallets
      ? [...connectedWallets]?.sort((walletA, walletB) => {
          return walletA.label.localeCompare(walletB.label);
        })
      : [];
  }, [connectedWallets]);

  const currentWalletBalance = currentWallet?.accounts?.at(0)?.balance;

  const formattedWalletBalance = useMemo(() => {
    if (currentWalletBalance) {
      const balanceEntries = Object.entries(currentWalletBalance);
      return `${Number(balanceEntries?.[0]?.[1]).toPrecision(4)} 
       ${balanceEntries?.[0]?.[0]}`;
    }
  }, [currentWalletBalance]);

  useEffect(() => {
    updateAccountCenter({ enabled: true });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // update isConnected in default wallets
  useEffect(() => {
    setWallets((prevWallets) => {
      return prevWallets?.map((prevWallet) => {
        const isConnected = connectedWallets?.find(
          (connectedWallet) => connectedWallet?.label === prevWallet?.label
        );
        if (isConnected?.label) {
          return { ...prevWallet, isConnected: true };
        } else {
          return { ...prevWallet, isConnected: false };
        }
      });
    });
  }, [connectedWallets]);

  const handleConnectWallet = (label: string) => {
    connect({
      autoSelect: {
        label,
        disableModals: true,
      },
    });
  };

  const handleDisconnectWallet = (label: WalletState["label"]) => {
    disconnect({
      label,
    });
  };

  const handleSelectWallet = (wallet: WalletState) => {
    setPrimaryWallet(wallet);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={`${inter.className} home`}>
        <div className="home-content">
          <div className="connected-wallets">
            {currentWallet ? (
              <div className="wallet-details">
                <p>
                  <strong>balance:</strong>
                  <span>{formattedWalletBalance}</span>
                </p>

                <p>
                  <strong>address:</strong>
                  <span>
                    {getShortWalletAddress(
                      currentWallet?.accounts?.at(0)?.address ?? ""
                    )}
                  </span>
                </p>

                <p>
                  <strong>chain id:</strong>
                  <span>{Number(currentWallet?.chains?.at(0)?.id)}</span>
                </p>
              </div>
            ) : null}

            <div className="header">
              <p>Digital accounts</p>
            </div>

            <div className="wallet-list">
              {sortedConnectedWallets?.length > 0 ? (
                sortedConnectedWallets?.map((wallet) => (
                  <WalletCard
                    key={wallet?.label}
                    wallet={wallet}
                    currentWallet={currentWallet}
                    onSelectWallet={handleSelectWallet}
                  />
                ))
              ) : (
                <p className="text-center">No Connected Wallet</p>
              )}
            </div>
          </div>

          <button
            className="connect-button"
            disabled={connecting}
            onClick={() => setIsModalOpen(true)}
          >
            {connecting ? "connecting..." : "+ Connect wallets"}
          </button>
        </div>

        <ConnectWalletModal
          wallets={wallets}
          isOpen={isModalOpen}
          closeModal={() => setIsModalOpen(false)}
          onConnectWallet={handleConnectWallet}
          onDisconnectWallet={handleDisconnectWallet}
        />
      </main>
    </>
  );
};

export default Home;
